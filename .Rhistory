###### Get the Data #####################################
## Initialize the Training Data
source('multi_simulate.R')
multi_simulate()
############################# PARAMETERS for GIBB's SAMPLING ####
iter = 100
iter.burnin = 50
iter.thin  = 5
k = 2
K <-  as.integer(N)
Time <- cbind(time,censoring)
source('multiinitialize.R')
multiinitialize()
source('multiinitialize.R')
multiinitialize()
######################### Initialize the Parameters ################
source('multiinitialize.R')
multiinitialize()
### This simulation Checks if the model works in 2 View Case
#### Copies from Simulation_Main from the one View Case
rm(list = ls())
#################################### SIMULATED DATA PROPERTIES ####################################################
## Number of points
N.test =  100
N.train = 100
N <- N.test
## Number of Clusters
F = 2
## Distribution of the points within three clusters
p.dist = c(0.5,0.5)
## Total Number of features D
D1 = 20
D2 = 20
## Total Percentage of irrelevant feature
prob.noise.feature = 0.20
## Overlap between Cluster of molecular Data of the relevant features
prob.overlap = 0.01
###### Get the Data #####################################
## Initialize the Training Data
source('multi_simulate.R')
multi_simulate()
############################# PARAMETERS for GIBB's SAMPLING ####
iter = 100
iter.burnin = 50
iter.thin  = 5
k = 2
K <-  as.integer(N)
Time <- cbind(time,censoring)
######################### Initialize the Parameters ################
source('multiinitialize.R')
multiinitialize()
### This simulation Checks if the model works in 2 View Case
#### Copies from Simulation_Main from the one View Case
rm(list = ls())
#################################### SIMULATED DATA PROPERTIES ####################################################
## Number of points
N.test =  100
N.train = 100
N <- N.test
## Number of Clusters
F = 2
## Distribution of the points within three clusters
p.dist = c(0.5,0.5)
## Total Number of features D
D1 = 20
D2 = 20
## Total Percentage of irrelevant feature
prob.noise.feature = 0.20
## Overlap between Cluster of molecular Data of the relevant features
prob.overlap = 0.01
###### Get the Data #####################################
## Initialize the Training Data
source('multi_simulate.R')
multi_simulate()
############################# PARAMETERS for GIBB's SAMPLING ####
iter = 100
iter.burnin = 50
iter.thin  = 5
k = 2
K <-  as.integer(N)
Time <- cbind(time,censoring)
######################### Initialize the Parameters ################
source('multiinitialize.R')
multiinitialize()
source('burninmultiDPMM.R')
burninmultiDPMM()
########### Train the Model #########################################
source('burninmultiDPMM.R')
burninmultiDPMM()
Y1
########### Train the Model #########################################
source('burninmultiDPMM.R')
burninmultiDPMM()
########### Train the Model #########################################
source('burninmultiDPMM.R')
burninmultiDPMM()
source('priorPARAMETERS.R')
param <- NA
paramtime1 <- NA
paramtime2 <- NA
cognate <- NA
hypercognate1 <- NA
hypercognate2 <- NA
loglike<- rep(0, iter)
randy <- c(0)
likli <- c(0)
source('posteriorGMM.R')
param <- posteriorGMMparametrs(c,Y1,gmmx1$mu,gmmx1$S, alpha, K, gmmx1$epsilon, gmmx1$W, gmmx1$beta, gmmx1$ro,N,D1 )
gmmx1$mu <- param$mean
gmmx1$S <- param$precision
param2 <- posteriorGMMparametrs(c,Y2,gmmx2$mu,gmmx2$S, alpha,K, gmmx2$epsilon, gmmx2$W, gmmx2$beta, gmmx2$ro,N,D2 )
gmmx2$mu <- param2$mean
gmmx2$S <- param2$precision
source('multiposteriorAFT.R')
paramtime2 <- posteriortimeparameterspenalized(c,Y2, That, regy2$lambda2, regy2$tau2, regy2$sigma2, regy2$beta0, regy2$betahat, K, gmmx2$epsilon, gmmx2$W, gmmx2$beta, gmmx2$ro, r, si, sig2.data,N, D2)
regy2$beta0 <- paramtime2$beta0
regy2$betahat <- paramtime2$betahat
regy2$sigma2 <- paramtime2$sigma2
regy2$lambda2 <- paramtime2$lambda2
regy2$tau2 <- paramtime2$tau2
paramtime1 <- posteriortimeparameterspenalized(c,Y1, That, regy1$lambda2, regy1$tau2, regy1$sigma2, regy1$beta0, regy1$betahat, K, gmmx1$epsilon, gmmx1$W, gmmx1$beta, gmmx1$ro, r, si, sig2.data,N, D1)
regy1$beta0 <- paramtime1$beta0
regy1$betahat <- paramtime1$betahat
regy1$sigma2 <- paramtime1$sigma2
regy1$lambda2 <- paramtime1$lambda2
regy1$tau2 <- paramtime1$tau2
source('posteriorhyperGMM.R')
# Updating the hyper paramters for the first data set
hypercognate <- posteriorhyperPLUS(c, Y1, gmmx1$mu, gmmx1$S, gmmx1$epsilon, gmmx1$W, gmmx1$beta, gmmx1$ro )
gmmx1$epsilon <- hypercognate$epsilon
tmpW <- hypercognate$W
gmmx1$W <- matrix(as.matrix(tmpW),nrow = D1, ncol =D1)
gmmx1$ro <- hypercognate$ro
hypercognate2 <- posteriorhyperPLUS(c, Y2, gmmx2$mu, gmmx2$S, gmmx2$epsilon, gmmx2$W, gmmx2$beta, gmmx2$ro)
gmmx2$epsilon <- hypercognate2$epsilon
tmpW2 <- hypercognate2$W
gmmx2$W <- matrix(as.matrix(tmpW2),nrow = D2, ncol =D2)
gmmx2$ro <- hypercognate2$ro
source('multiposteriorCLASS.R')
cognate <- multiposteriorchineseAFT(c,Y1,Y2,D1,D2,That, K, r, si,sig2.dat,gmmx1, gmmx2, regy1, regy2)
c <- cognate$c
gmmx1 <- cognate$gmmx1
gmmx2 <- cognate$gmmx2
regy1 <- cognate$regy1
regy2 <- cognate$regy2
gmmx1$W
solve(gmmx1$W)
########### Train the Model #########################################
source('burninmultiDPMM.R')
burninmultiDPMM()
########### Train the Model #########################################
source('gibbsmultiDPMM.R')
gibbsmultiDPMM()
### This simulation Checks if the model works in 2 View Case
#### Copies from Simulation_Main from the one View Case
rm(list = ls())
#################################### SIMULATED DATA PROPERTIES ####################################################
## Number of points
N.test =  100
N.train = 100
N <- N.test
## Number of Clusters
F = 2
## Distribution of the points within three clusters
p.dist = c(0.5,0.5)
## Total Number of features D
D1 = 20
D2 = 20
## Total Percentage of irrelevant feature
prob.noise.feature = 0.20
## Overlap between Cluster of molecular Data of the relevant features
prob.overlap = 0.01
###### Get the Data #####################################
## Initialize the Training Data
source('multi_simulate.R')
multi_simulate()
############################# PARAMETERS for GIBB's SAMPLING ####
iter = 50
iter.burnin = 50
iter.thin  = 5
k = 2
K <-  as.integer(N)
Time <- cbind(time,censoring)
######################### Initialize the Parameters ################
source('multiinitialize.R')
multiinitialize()
################# GroundTruth (by pasting togehter columns)
source('TRAINmultiComparison.R')
multigroundtruth()
library(glment)
library(glmnet)
################# GroundTruth (by pasting togehter columns)
source('TRAINmultiComparison.R')
multigroundtruth()
library(MASS)
library(mixtools)
library(matrixcalc)
library(stats)
library(Runuran)
library(truncnorm)
library(Matrix)
library(MCMCpack)
library(psych)
library(VGAM)
library(MixSim)
library(statmod)
library(flexclust)
library(mixAK)
library(mclust)
library(monomvn)
library(cluster)
library(flexmix)
library(survival)
library(utils)
library(rms)
library(pec)
library(ipred)
library(verification)
library(Hmisc)
library(glmpath)
library(glmnet)
library(gplots)
library(doMC)
library(sparcl)
library(NMF)
library(mcfa)
library(kernlab)
library(class)
library(reshape)
library(impute)
library(GGally)
library(xlsx)
library(XML)
library(RCurl)
library(multiMiR)
library(MASS)
library(mixtools)
library(matrixcalc)
library(stats)
library(Runuran)
library(truncnorm)
library(Matrix)
library(MCMCpack)
library(psych)
library(VGAM)
library(MixSim)
library(statmod)
library(flexclust)
library(survcomp)
library(mixAK)
library(mclust)
library(monomvn)
library(gtools)
library(ggplot2)
library(GenOrd)
library(plyr)
library(glmnet)
library(MASS)
library(mixtools)
library(matrixcalc)
library(stats)
library(Runuran)
library(truncnorm)
library(Matrix)
library(MCMCpack)
library(psych)
library(VGAM)
library(MixSim)
library(statmod)
library(flexclust)
library(mixAK)
library(mclust)
library(monomvn)
library(cluster)
library(flexmix)
library(survival)
library(utils)
library(rms)
library(pec)
library(ipred)
library(verification)
library(Hmisc)
library(glmpath)
library(glmnet)
library(gplots)
library(doMC)
library(sparcl)
library(NMF)
library(mcfa)
library(kernlab)
library(class)
library(reshape)
library(impute)
library(GGally)
library(xlsx)
library(XML)
library(RCurl)
library(multiMiR)
library(MASS)
library(mixtools)
library(matrixcalc)
library(stats)
library(Runuran)
library(truncnorm)
library(Matrix)
library(MCMCpack)
library(psych)
library(VGAM)
library(MixSim)
library(statmod)
library(flexclust)
library(survcomp)
library(mixAK)
library(mclust)
library(monomvn)
library(gtools)
library(ggplot2)
library(GenOrd)
library(plyr)
library(glmnet)
clear()
cl()
### This simulation Checks if the model works in 2 View Case
#### Copies from Simulation_Main from the one View Case
rm(list = ls())
#################################### SIMULATED DATA PROPERTIES ####################################################
## Number of points
N.test =  100
N.train = 100
N <- N.test
## Number of Clusters
F = 2
## Distribution of the points within three clusters
p.dist = c(0.5,0.5)
## Total Number of features D
D1 = 20
D2 = 20
## Total Percentage of irrelevant feature
prob.noise.feature = 0.20
## Overlap between Cluster of molecular Data of the relevant features
prob.overlap = 0.01
###### Get the Data #####################################
## Initialize the Training Data
source('multi_simulate.R')
multi_simulate()
############################# PARAMETERS for GIBB's SAMPLING ####
iter = 50
iter.burnin = 50
iter.thin  = 5
k = 2
K <-  as.integer(N)
Time <- cbind(time,censoring)
######################### Initialize the Parameters ################
source('multiinitialize.R')
multiinitialize()
################# GroundTruth (by pasting togehter columns)
source('TRAINmultiComparison.R')
multigroundtruth()
library(icluster)
library(iCluster)
library(iCluster)
################# GroundTruth (by pasting togehter columns)
source('TRAINmultiComparison.R')
multigroundtruth()
library(CCA)
install.packages("CCA")
library(CCA)
library(CCA)
########### Using CCA ################
fit.cc <- cc(Y1, Y2)
y1 <- fit.cc$scores$xscores
y2 <- fit.cc$scores$yscores
f <- length(which(fit.cc$cor > 0.5))
Y.CCA <- cbind(y1[,1:f],y2[,1:f])
km <- kmeans(Y.CCA, centers =k, nstart =10)
randindexCCA <<- adjustedRandIndex(c.true,as.factor(km$cluster))
### This simulation Checks if the model works in 2 View Case
#### Copies from Simulation_Main from the one View Case
rm(list = ls())
#################################### SIMULATED DATA PROPERTIES ####################################################
## Number of points
N.test =  100
N.train = 100
N <- N.test
## Number of Clusters
F = 2
## Distribution of the points within three clusters
p.dist = c(0.5,0.5)
## Total Number of features D
D1 = 20
D2 = 20
## Total Percentage of irrelevant feature
prob.noise.feature = 0.20
## Overlap between Cluster of molecular Data of the relevant features
prob.overlap = 0.01
###### Get the Data #####################################
## Initialize the Training Data
source('multi_simulate.R')
multi_simulate()
############################# PARAMETERS for GIBB's SAMPLING ####
iter = 50
iter.burnin = 50
iter.thin  = 5
k = 2
K <-  as.integer(N)
Time <- cbind(time,censoring)
######################### Initialize the Parameters ################
source('multiinitialize.R')
multiinitialize()
################# GroundTruth (by pasting togehter columns)
source('TRAINmultiComparison.R')
multigroundtruth()
########### Train the Model #########################################
source('burninmultiDPMM.R')
burninmultiDPMM()
########### Train the Model #########################################
source('gibbsmultiDPMM.R')
gibbsmultiDPMM()
source('MCMCmultianalyze.R')
analyzemultiDPMM()
###### Predicting Survival Times Based on two Molecular Data Sources ####################################
source('multipredictchineseAFTtime.R')
multipredictchineseAFTtime(Y1.test, Y2.test)
predicted.cindex <- survConcordance(Surv(exp(time.new),censoring.new) ~ exp(-post.time.avg))[1]
source('MCMCmultianalyze.R')
analyzemultiDPMM()
##### Analyzing the Model #########################################
source('MCMCmultianalyze.R')
analyzemultiDPMM()
N
##### Analyzing the Model #########################################
source('MCMCmultianalyze.R')
analyzemultiDPMM()
############# TRAININIG DATA ###########################################
#######################################################################
########################################################################
#### This function calculates some important metrices for the TRAINING DATA Data
#### Adjusted RandIndex
#### C-Index
#### Brier Scores for the Survival Curves
#### Point Estimate of Clsuter Assignments
##### Brier Scores for feature Selection
########## ANLAYSING THE MCMC samples AND CALCULATING METRICES #######################################################
Nps = as.integer(iter/ iter.thin)
count <- Nps
final.rand <- c(0)
############ The Matrices that will store the results #################################################
final.rand <- c(0)
cindex.final1 <- c(0)
cindex.final2 <- c(0)
cindex.final <- c(0)
brier.final <- matrix(NA, nrow = Nps, ncol = F)
################ Begin Analysig the MCMC samples #######################################################
Nps
for (h in 1:Nps){
### Adjusted Rand Indices
#final.rand[h] <- adjustedRandIndex(c.list[[h]],as.factor(c.true))
### See C-Index (concordance index)
surv.aft <- Surv(exp(time),censoring)
### Predict Time from the model
source('linearprediction.R')
tem.tim1 <- as.vector(unlist(predicttime(c.list[[h]], Y1, est.regy1[[h]]$beta0, est.regy1[[h]]$betahat, est.regy1[[h]]$sigma2)))
tem.tim2 <- as.vector(unlist(predicttime(c.list[[h]],Y2, est.regy2[[h]]$beta0, est.regy2[[h]]$betahat, est.regy2[[h]]$sigma2)))
cindex.final1[h] <-  survConcordance(surv.aft ~ exp(-tem.tim1))[[1]]
cindex.final2[h] <-  survConcordance(surv.aft ~ exp(-tem.tim2))[[1]]
source('multilinearprediction.R')
tem.tim <- as.vector(unlist(multipredictlinear(c.list[[h]],  est.regy1[[h]], est.regy2[[h]] )))
cindex.final[h] <-  survConcordance(surv.aft ~ exp(-tem.tim))[[1]]
}
source('linearprediction.R')
h =1
as.vector(unlist(predicttime(c.list[[h]], Y1, est.regy1[[h]]$beta0, est.regy1[[h]]$betahat, est.regy1[[h]]$sigma2)))
dim(Y)
dim(Y1)
D
N
That
Time
h =1
surv.aft <- Surv(exp(time),censoring)
source('linearprediction.R')
as.vector(unlist(predicttime(c.list[[h]], Y1, That, Time, est.regy1[[h]]$beta0, est.regy1[[h]]$betahat, est.regy1[[h]]$sigma2)))
warnings()
source('linearprediction.R')
predicttime(c.list[[h]], Y1, That, Time, est.regy1[[h]]$beta0, est.regy1[[h]]$betahat, est.regy1[[h]]$sigma2)
warnings()
##### Analyzing the Model #########################################
source('MCMCmultianalyze.R')
analyzemultiDPMM()
rel.D
rel.D1
rel.D2
source('multipredictCLASS.R')
multipredictchineseAFTtime(Y1.test, Y2.test)
predicted.cindex <- survConcordance(Surv(exp(time.new),censoring.new) ~ exp(-post.time.avg))[1]
source('multipredictCLASS.R')
multipredictchineseAFTtime(Y1.test, Y2.test)
source('multipredictCLASS.R')
multipredictchineseAFTtime(Y1.test, Y2.test)
survConcordance(Surv(exp(time.new),censoring.new) ~ exp(-post.time.avg))[1]
predicted.cindex <- survConcordance(Surv(exp(time.new),censoring.new) ~ exp(-post.time.avg))[1]
source('multipredictCLASS.R')
multipredictCLASS(Y1.test, Y2.test)
posteriorprob
c.true.new
apply(posteriorprob,1,max)
apply(posteriorprob,1,which.max)
adjustedRandIndex(c.true.new,apply(posteriorprob,1,which.max))
predicted.rindex <- adjustedRandIndex(c.true.new,apply(posteriorprob,1,which.max))
adjustedRandIndex(c.true.new,apply(posteriorprob,1,which.max))
source('TESTmultiComparison.R')
predictionGroundTruth()
